## Summer Class

The following code assumes a class named Summer exists. Create that class so the code will work:
s = Summer()
t = Summer()

s.add(10)
s.add(20)
t.add(50)
s.add(30)

# should print 60
print(s.total)

# should print 50
print(t.total)


## Add AI Player to tic tac toe game
if a game name ends with '_against_ai' then 'x' is a human player and 'o' is an automated ai player

if game_name not in games:
    exists
 else:
    create a new game
    games[game_name] = Game(...)


## Recursive Topological Sorting

The following code assumes a class named Widget which represent a thing that needs to be built.
Building a widget should automatically trigger a build on all its dependencies.
Implement Widget so the following code works:

```
luke    = Widget("Luke")
hansolo = Widget("Han Solo")
leia    = Widget("Leia")
yoda    = Widget("Yoda")
padme   = Widget("Padme Amidala")
anakin  = Widget("Anakin Skywalker")
obi     = Widget("Obi-Wan")
darth   = Widget("Darth Vader")
_all    = Widget("")


luke.add_dependency(hansolo, leia, yoda)
leia.add_dependency(padme, anakin)
obi.add_dependency(yoda)
darth.add_dependency(anakin)

_all.add_dependency(luke, hansolo, leia, yoda, padme, anakin, obi, darth)
_all.build()
# code should print: Han Solo, Padme Amidala, Anakin Skywalker, Leia, Yoda, Luke, Obi-Wan, Darth Vader
# (can print with newlines in between modules)
```